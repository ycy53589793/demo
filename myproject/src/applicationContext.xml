<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	
	<!-- action -->
	<bean id="loginAction" class="com.common.LoginAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	<bean id="orderAction" class="com.order.action.OrderAction" scope="prototype"/>
	<!-- end -->
	
	<!-- service -->
	<bean id="userService" class="com.user.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<bean id="orderService" class="com.order.service.impl.OrderServiceImpl"/>
	<bean id="roleService" class="com.role.service.impl.RoleServiceImpl"/>
	<bean id="taskService" class="com.task.service.impl.TaskServiceImpl"/>
	<bean id="dynamicStatementBuilder" class="com.template.service.impl.DynamicHibernateStatementBuilderImpl">
		<property name="fileNames">
            <list>
                <value>classpath*:/**/*-dynamic.xml</value><!-- 这里我们指定要加载某个文件夹下所有以-dynamic.xml结尾的文件   -->
            </list>
        </property>
	</bean>
	<!-- end -->
	
	<!-- dao -->
	<bean id="userDao" class="com.user.dao.UserDao"/>
	<bean id="orderDao" class="com.order.dao.OrderDao"/>
	<bean id="roleDao" class="com.role.dao.RoleDao"/>
	<bean id="taskDao" class="com.task.dao.TaskDao"/>
	<bean id="baseDao" class="com.BaseDao" abstract="true">
		<property name="hibernateTemplateDao" ref="hibernateTemplateDao"></property>
	</bean>
	<bean id="hibernateTemplateDao" class="com.template.dao.HibernateTemplateDao">
		<property name="templateCache">
			<map></map>
		</property>
		<property name="dynamicStatementBuilder" ref="dynamicStatementBuilder"></property>
	</bean>
	<!-- end -->
	
	<!-- bean -->
	<bean id="order" class="com.order.bean.Order"/>
	<bean id="user" class="com.user.bean.User"/>
	<!-- end -->
	
	<!-- apache shiro 安全框架  Shiro's main business-tier object for web-enabled applications -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="loginService" />
        <property name="cacheManager" ref="shiroEhcacheManager"/>
    </bean>
    <!-- 項目自定义的Realm-->
    <bean id="loginService" class="com.common.service.impl.LoginServiceImpl">
        <property name="userService" ref="userService"/>
        <property name="roleService" ref="roleService"/>
    </bean>
    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/common/login.jsp"/>
        <property name="successUrl" value="/order/order.jsp"/>
        <property name="unauthorizedUrl" value="/common/error.jsp"/>
        <property name="filterChainDefinitions">
            <value>
                
            </value>
        </property>
    </bean>
    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:/ehcache-shiro.xml"/>
    </bean>
    <!-- end -->
    
    <!-- quartz定时器  定时器轮询任务列表 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="businessTestTrigger"/>   
			</list>
		</property>
	</bean>
	<!-- 引用、定制时间间隔 -->
	<bean id="businessTestTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="businessTestDetail"/>
		</property>
		<property name="cronExpression">
			<value>0 0 12 * * ?</value>
		</property>
	</bean>
	<!-- 引用、配置要运行的方法 -->
	<bean id="businessTestDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 目标对象 -->
		<property name="targetObject">
			<ref bean="taskService"/>
		</property>
		<!-- 是否同时发生 -->
		<property name="concurrent" value="false"></property>
		<!-- 目标方法 -->
		<property name="targetMethod" value="run"></property>
	</bean>
	<!-- end -->
    
</beans>